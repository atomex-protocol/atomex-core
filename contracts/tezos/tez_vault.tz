parameter (or 
             (or 
                (pair %initiate 
                   (address %participant)
                   (pair 
                      (pair (bytes %hashed_secret) (timestamp %refund_time))
                      (mutez %payoff)))
                (bytes %add :hashed_secret))
             (or 
                (bytes %redeem :secret) 
                (bytes %refund :hashed_secret)));
storage (pair 
           (big_map 
              bytes
              (pair 
                 (pair (address %initiator) (address %participant))
                 (pair 
                    (pair (mutez %amount) (timestamp %refund_time))
                    (mutez %payoff))))
           unit);
code {
       NIL @operations operation; SWAP;
       UNPAPAIR @% @% @%; DIP {DUP};
       IF_LEFT
         {
           IF_LEFT  
             { # Initiate swap
               # Check swap params
               UNPAIR @% @%;
               DUP; CONTRACT @participant unit; IF_SOME {DROP} { PUSH string "participant address doesn't exist or has unsupported type"; FAILWITH };
               SWAP; UNPPAIIR @% @% @%;
               DUP; SIZE; PUSH nat 32; IFCMPEQ {} {PUSH string "hash size doesn't equal 32 bytes"; FAILWITH };
               DIP
                 {
                   DUP; NOW; IFCMPLT {} { PUSH string "refund_time has already come"; FAILWITH };
                   DIP { DUP }; SWAP;
                   # Substract the payoff
                   AMOUNT @amount; SUB;  
                   # Check sender
                   SENDER;
                   DUP; CONTRACT @initiator unit; IF_SOME {DROP} { PUSH string "sender address doesn't exist or has unsupported type"; FAILWITH };
                   # Check if swap for such hash already exists
                   DIP { PPAIIR; SWAP; }; PPAIIR; SOME @xcat; 
                   SWAP;
                 };
               DUP; DIP { MEM; NOT; IF {} {PUSH string "swap for this hash is already initiated"; FAILWITH} };
             }
             { # Add funds to an existing swap
               DUP;
               DIP
                 {
                   GET; IF_SOME {} { PUSH string "no swap for such hash"; FAILWITH };
                   UNPAIR @% @%; 
                   DIP
                     {
                       # Check if swap is expired
                       UNPPAIIR @% @% @%; SWAP; 
                       DUP; NOW; IFCMPLT {} { PUSH string "refund_time has already come"; FAILWITH }; SWAP;  
                       # Add funds
                       AMOUNT @amount; ADD;  
                     };
                   PAPPAIIR; SOME @xcat;
                 };
             };
           UPDATE; PAIR @new_storage; SWAP; PAIR;
         }
         {
           IF_LEFT
             { # Redeem swap
               PUSH mutez 0; AMOUNT; IFCMPEQ {} {PUSH string "can not accept tez"; FAILWITH };
               DUP; SIZE; PUSH nat 32; IFCMPEQ {} {PUSH string "secret size doesn't equal 32 bytes"; FAILWITH };  
               # Check if secret matches the hash
               SHA256; SHA256 @hash; DUP; DIP {SWAP}; 
               DIIP 
                 {
                   GET; IF_SOME {} { PUSH string "no swap for such secret"; FAILWITH }; 
                   # check participant 
                   DUP; UNPAIR @% @%; CDR @%; CONTRACT @participant unit; IF_SOME {} { PUSH string "recipient does not exist"; FAILWITH };
                   SWAP; CAAR @%;
                   DIIP
                     {
                       # Check sender
                       SENDER;
                       CONTRACT @sender unit; IF_SOME {} { PUSH string "wrong sender address"; FAILWITH };
                       # Check if swap is expired
                       SWAP; CDR @%; UNPPAIIR @% @% @%; DROP;  
                       NOW; IFCMPLT {} { PUSH string "refund_time has already come"; FAILWITH };
                       # Check if amount is positive
                       DUP; PUSH mutez 0;  
                       IFCMPLT
                         { # Add transfer operation to the operation list if amount is positive
                           UNIT; TRANSFER_TOKENS;
                           DIP {SWAP}; CONS;
                         }
                         { # Skip otherwise
                           DROP; DROP; SWAP
                         };
                     };
                   UNIT; TRANSFER_TOKENS;
                 };
             }
             { # Refund swap
               PUSH mutez 0; AMOUNT; IFCMPEQ {} {PUSH string "can not accept tez"; FAILWITH };
               DUP;
               DIP
                 {
                   # Check if swap with such hash exists
                   GET; IF_SOME {} { PUSH string "no swap for such hash"; FAILWITH };
                   # Check initiator
                   DUP; CAAR @%; CONTRACT @initiator unit; IF_SOME {} { PUSH string "recipient does not exist"; FAILWITH }; SWAP; 
           # Check if refund_time has come
                   CDR; UNPPAIIR @% @% @%; SWAP;
                   NOW; IFCMPGE {} { PUSH string "refund_time has not come"; FAILWITH };
                   # add payoff back to the amount
                   ADD;
                   # Add transfer operation
                   UNIT; TRANSFER_TOKENS; SWAP;
                   DIIP {SWAP};
                 };
             };     
           NONE @none (pair (pair address address) (pair (pair mutez timestamp) mutez));
           SWAP; UPDATE @cleared_map; SWAP; DIP { SWAP; DIP {PAIR} };
           CONS; PAIR;
         }
     }